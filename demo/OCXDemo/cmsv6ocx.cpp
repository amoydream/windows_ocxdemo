// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "cmsv6ocx.h"

/////////////////////////////////////////////////////////////////////////////
// CCMSV6OCX

IMPLEMENT_DYNCREATE(CCMSV6OCX, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CCMSV6OCX properties

CString CCMSV6OCX::GetServerIP()
{
	CString result;
	GetProperty(0x1, VT_BSTR, (void*)&result);
	return result;
}

void CCMSV6OCX::SetServerIP(LPCTSTR propVal)
{
	SetProperty(0x1, VT_BSTR, propVal);
}

long CCMSV6OCX::GetServerPort()
{
	long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CCMSV6OCX::SetServerPort(long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

long CCMSV6OCX::GetPaneType()
{
	long result;
	GetProperty(0x3, VT_I4, (void*)&result);
	return result;
}

void CCMSV6OCX::SetPaneType(long propVal)
{
	SetProperty(0x3, VT_I4, propVal);
}

long CCMSV6OCX::GetLayout()
{
	long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}

void CCMSV6OCX::SetLayout(long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}

CString CCMSV6OCX::GetCaptureSavePath()
{
	CString result;
	GetProperty(0x5, VT_BSTR, (void*)&result);
	return result;
}

void CCMSV6OCX::SetCaptureSavePath(LPCTSTR propVal)
{
	SetProperty(0x5, VT_BSTR, propVal);
}

long CCMSV6OCX::GetAutoCloseVideoTime()
{
	long result;
	GetProperty(0x6, VT_I4, (void*)&result);
	return result;
}

void CCMSV6OCX::SetAutoCloseVideoTime(long propVal)
{
	SetProperty(0x6, VT_I4, propVal);
}

long CCMSV6OCX::GetRecordPackTime()
{
	long result;
	GetProperty(0x7, VT_I4, (void*)&result);
	return result;
}

void CCMSV6OCX::SetRecordPackTime(long propVal)
{
	SetProperty(0x7, VT_I4, propVal);
}

long CCMSV6OCX::GetDiskNoSpaceOperateType()
{
	long result;
	GetProperty(0x8, VT_I4, (void*)&result);
	return result;
}

void CCMSV6OCX::SetDiskNoSpaceOperateType(long propVal)
{
	SetProperty(0x8, VT_I4, propVal);
}

long CCMSV6OCX::GetDiskReservedSpace()
{
	long result;
	GetProperty(0x9, VT_I4, (void*)&result);
	return result;
}

void CCMSV6OCX::SetDiskReservedSpace(long propVal)
{
	SetProperty(0x9, VT_I4, propVal);
}

unsigned long CCMSV6OCX::GetColorBK()
{
	unsigned long result;
	GetProperty(0xa, VT_I4, (void*)&result);
	return result;
}

void CCMSV6OCX::SetColorBK(unsigned long propVal)
{
	SetProperty(0xa, VT_I4, propVal);
}

unsigned long CCMSV6OCX::GetColorVideoBK()
{
	unsigned long result;
	GetProperty(0xb, VT_I4, (void*)&result);
	return result;
}

void CCMSV6OCX::SetColorVideoBK(unsigned long propVal)
{
	SetProperty(0xb, VT_I4, propVal);
}

unsigned long CCMSV6OCX::GetColorVideoTitleBK()
{
	unsigned long result;
	GetProperty(0xc, VT_I4, (void*)&result);
	return result;
}

void CCMSV6OCX::SetColorVideoTitleBK(unsigned long propVal)
{
	SetProperty(0xc, VT_I4, propVal);
}

unsigned long CCMSV6OCX::GetColorVideoBKActive()
{
	unsigned long result;
	GetProperty(0xd, VT_I4, (void*)&result);
	return result;
}

void CCMSV6OCX::SetColorVideoBKActive(unsigned long propVal)
{
	SetProperty(0xd, VT_I4, propVal);
}

CString CCMSV6OCX::GetStrVideoBKPicturePath()
{
	CString result;
	GetProperty(0xe, VT_BSTR, (void*)&result);
	return result;
}

void CCMSV6OCX::SetStrVideoBKPicturePath(LPCTSTR propVal)
{
	SetProperty(0xe, VT_BSTR, propVal);
}

long CCMSV6OCX::GetVideoControl()
{
	long result;
	GetProperty(0xf, VT_I4, (void*)&result);
	return result;
}

void CCMSV6OCX::SetVideoControl(long propVal)
{
	SetProperty(0xf, VT_I4, propVal);
}

long CCMSV6OCX::GetShowWnd()
{
	long result;
	GetProperty(0x10, VT_I4, (void*)&result);
	return result;
}

void CCMSV6OCX::SetShowWnd(long propVal)
{
	SetProperty(0x10, VT_I4, propVal);
}

long CCMSV6OCX::GetNActiveWndIndex()
{
	long result;
	GetProperty(0x11, VT_I4, (void*)&result);
	return result;
}

void CCMSV6OCX::SetNActiveWndIndex(long propVal)
{
	SetProperty(0x11, VT_I4, propVal);
}

long CCMSV6OCX::GetWndArrange()
{
	long result;
	GetProperty(0x12, VT_I4, (void*)&result);
	return result;
}

void CCMSV6OCX::SetWndArrange(long propVal)
{
	SetProperty(0x12, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CCMSV6OCX operations

long CCMSV6OCX::StartVideo(LPCTSTR szDevIDNO, long nChannel, long nWindow)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_I4;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		szDevIDNO, nChannel, nWindow);
	return result;
}

long CCMSV6OCX::StopVideo(long nWindow)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nWindow);
	return result;
}

void CCMSV6OCX::FullScreen()
{
	InvokeHelper(0x15, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CCMSV6OCX::OpenSound(long nWindow)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x16, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nWindow);
	return result;
}

void CCMSV6OCX::CloseSound()
{
	InvokeHelper(0x17, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CCMSV6OCX::CapturePicture(long nWindow)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nWindow);
	return result;
}

long CCMSV6OCX::StartTalkBack(LPCTSTR szDevIDNO)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x19, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		szDevIDNO);
	return result;
}

void CCMSV6OCX::StopTalkBack()
{
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CCMSV6OCX::StartMonitor(LPCTSTR szDevIDNO, long nChannel)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x1b, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		szDevIDNO, nChannel);
	return result;
}

void CCMSV6OCX::CloseAllSound()
{
	InvokeHelper(0x1c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CCMSV6OCX::StopMonitor()
{
	InvokeHelper(0x1d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CCMSV6OCX::StartRecord(LPCTSTR szDevIDNO, long nChannel)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x1e, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		szDevIDNO, nChannel);
	return result;
}

long CCMSV6OCX::StopRecord(LPCTSTR szDevINDO, long nChannel)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x1f, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		szDevINDO, nChannel);
	return result;
}

long CCMSV6OCX::CaptureAllWindowPicture()
{
	long result;
	InvokeHelper(0x20, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CCMSV6OCX::ExitFullScreen()
{
	InvokeHelper(0x21, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CCMSV6OCX::IsFullScreen()
{
	BOOL result;
	InvokeHelper(0x22, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long CCMSV6OCX::SetViewTitle(long nWindow, LPCTSTR strTitle)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x23, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nWindow, strTitle);
	return result;
}

long CCMSV6OCX::PtzControl(long nWindow, long nCommand, long nSpeed, long nParam)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x24, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nWindow, nCommand, nSpeed, nParam);
	return result;
}

long CCMSV6OCX::StartRecSearch(LPCTSTR strDevIDNO, long nChannel, long nRecType, DATE nStartTime, DATE nEndTime, long nLocation, long nFileType)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_I4 VTS_DATE VTS_DATE VTS_I4 VTS_I4;
	InvokeHelper(0x25, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		strDevIDNO, nChannel, nRecType, nStartTime, nEndTime, nLocation, nFileType);
	return result;
}

void CCMSV6OCX::StopRecSearch()
{
	InvokeHelper(0x26, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CCMSV6OCX::StartPlaybackRec(LPCTSTR strFile, DATE nFileStartTime, DATE nFileEndTime, LPCTSTR strDevIDNO, long nChannel, long nFileLen, long nFileType, long nLocation, long nSvrID, DATE nPlayStartTime, DATE nPlayEndTime, BOOL bPlayOnlyIFrame)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_DATE VTS_DATE VTS_BSTR VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_DATE VTS_DATE VTS_BOOL;
	InvokeHelper(0x27, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		strFile, nFileStartTime, nFileEndTime, strDevIDNO, nChannel, nFileLen, nFileType, nLocation, nSvrID, nPlayStartTime, nPlayEndTime, bPlayOnlyIFrame);
	return result;
}

long CCMSV6OCX::StartDownFile(LPCTSTR strDevIDNO, long nChannel, LPCTSTR strFile, long nFileLen, DATE nFileStartTime, DATE nFileEndTime, long nLocation, long nSvrID, long nFileType, long nFileAttr, LPCTSTR strFilePath)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_BSTR VTS_I4 VTS_DATE VTS_DATE VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_BSTR;
	InvokeHelper(0x28, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		strDevIDNO, nChannel, strFile, nFileLen, nFileStartTime, nFileEndTime, nLocation, nSvrID, nFileType, nFileAttr, strFilePath);
	return result;
}

long CCMSV6OCX::StopDownFile()
{
	long result;
	InvokeHelper(0x29, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CCMSV6OCX::StartSubscribeGps(LPCTSTR szDevIDNO)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2a, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		szDevIDNO);
	return result;
}

long CCMSV6OCX::StopSubscribeGps()
{
	long result;
	InvokeHelper(0x2b, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CCMSV6OCX::CheckOnline(LPCTSTR szDevIDNO)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2c, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		szDevIDNO);
	return result;
}

long CCMSV6OCX::SnapshotDev(LPCTSTR szDevIDNO, long nChannel)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x2d, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		szDevIDNO, nChannel);
	return result;
}

long CCMSV6OCX::GetDevNetFlowStatistics(LPCTSTR szDevIDNO)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2e, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		szDevIDNO);
	return result;
}

long CCMSV6OCX::SetDevNetFlowStatistics(LPCTSTR szDevIDNO, float fFlowUsedToday, float fFlowUsedMonth, long nIsOpenFlowCount, long nIsOpenDayFlowRemind, long nIsOpenMonthFlwRemind, float fDayLimit, float fMonthLimit, long nDayRemind, long nMonthRemind, 
		long nMonthTotleDay)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_R4 VTS_R4 VTS_I4 VTS_I4 VTS_I4 VTS_R4 VTS_R4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x2f, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		szDevIDNO, fFlowUsedToday, fFlowUsedMonth, nIsOpenFlowCount, nIsOpenDayFlowRemind, nIsOpenMonthFlwRemind, fDayLimit, fMonthLimit, nDayRemind, nMonthRemind, nMonthTotleDay);
	return result;
}

long CCMSV6OCX::StartSubscribeAlarm(LPCTSTR szDevIDNO)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x30, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		szDevIDNO);
	return result;
}

long CCMSV6OCX::StopSubscribeAlarm()
{
	long result;
	InvokeHelper(0x31, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CCMSV6OCX::StartVoiceBroadcast(LPCTSTR lpDevIDNO)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x32, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lpDevIDNO);
	return result;
}

long CCMSV6OCX::StopVoiceBroadcast()
{
	long result;
	InvokeHelper(0x33, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CCMSV6OCX::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
