#if !defined(AFX_CMSV6OCX_H__4E0D0C35_78CB_4BA2_B58C_3888D4B49B67__INCLUDED_)
#define AFX_CMSV6OCX_H__4E0D0C35_78CB_4BA2_B58C_3888D4B49B67__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CCMSV6OCX wrapper class

class CCMSV6OCX : public CWnd
{
protected:
	DECLARE_DYNCREATE(CCMSV6OCX)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xdab63197, 0x3ff9, 0x4236, { 0x92, 0x4c, 0xf8, 0x64, 0x10, 0x94, 0xdd, 0xfd } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:
	CString GetServerIP();
	void SetServerIP(LPCTSTR);
	long GetServerPort();
	void SetServerPort(long);
	long GetPaneType();
	void SetPaneType(long);
	long GetLayout();
	void SetLayout(long);
	CString GetCaptureSavePath();
	void SetCaptureSavePath(LPCTSTR);
	long GetAutoCloseVideoTime();
	void SetAutoCloseVideoTime(long);
	long GetRecordPackTime();
	void SetRecordPackTime(long);
	long GetDiskNoSpaceOperateType();
	void SetDiskNoSpaceOperateType(long);
	long GetDiskReservedSpace();
	void SetDiskReservedSpace(long);
	unsigned long GetColorBK();
	void SetColorBK(unsigned long);
	unsigned long GetColorVideoBK();
	void SetColorVideoBK(unsigned long);
	unsigned long GetColorVideoTitleBK();
	void SetColorVideoTitleBK(unsigned long);
	unsigned long GetColorVideoBKActive();
	void SetColorVideoBKActive(unsigned long);
	CString GetStrVideoBKPicturePath();
	void SetStrVideoBKPicturePath(LPCTSTR);
	long GetVideoControl();
	void SetVideoControl(long);
	long GetShowWnd();
	void SetShowWnd(long);
	long GetNActiveWndIndex();
	void SetNActiveWndIndex(long);
	long GetWndArrange();
	void SetWndArrange(long);

// Operations
public:
	long StartVideo(LPCTSTR szDevIDNO, long nChannel, long nWindow);
	long StopVideo(long nWindow);
	void FullScreen();
	long OpenSound(long nWindow);
	void CloseSound();
	long CapturePicture(long nWindow);
	long StartTalkBack(LPCTSTR szDevIDNO);
	void StopTalkBack();
	long StartMonitor(LPCTSTR szDevIDNO, long nChannel);
	void CloseAllSound();
	void StopMonitor();
	long StartRecord(LPCTSTR szDevIDNO, long nChannel);
	long StopRecord(LPCTSTR szDevINDO, long nChannel);
	long CaptureAllWindowPicture();
	void ExitFullScreen();
	BOOL IsFullScreen();
	long SetViewTitle(long nWindow, LPCTSTR strTitle);
	long PtzControl(long nWindow, long nCommand, long nSpeed, long nParam);
	long StartRecSearch(LPCTSTR strDevIDNO, long nChannel, long nRecType, DATE nStartTime, DATE nEndTime, long nLocation, long nFileType);
	void StopRecSearch();
	long StartPlaybackRec(LPCTSTR strFile, DATE nFileStartTime, DATE nFileEndTime, LPCTSTR strDevIDNO, long nChannel, long nFileLen, long nFileType, long nLocation, long nSvrID, DATE nPlayStartTime, DATE nPlayEndTime, BOOL bPlayOnlyIFrame);
	long StartDownFile(LPCTSTR strDevIDNO, long nChannel, LPCTSTR strFile, long nFileLen, DATE nFileStartTime, DATE nFileEndTime, long nLocation, long nSvrID, long nFileType, long nFileAttr, LPCTSTR strFilePath);
	long StopDownFile();
	long StartSubscribeGps(LPCTSTR szDevIDNO);
	long StopSubscribeGps();
	long CheckOnline(LPCTSTR szDevIDNO);
	long SnapshotDev(LPCTSTR szDevIDNO, long nChannel);
	long GetDevNetFlowStatistics(LPCTSTR szDevIDNO);
	long SetDevNetFlowStatistics(LPCTSTR szDevIDNO, float fFlowUsedToday, float fFlowUsedMonth, long nIsOpenFlowCount, long nIsOpenDayFlowRemind, long nIsOpenMonthFlwRemind, float fDayLimit, float fMonthLimit, long nDayRemind, long nMonthRemind, 
		long nMonthTotleDay);
	long StartSubscribeAlarm(LPCTSTR szDevIDNO);
	long StopSubscribeAlarm();
	long StartVoiceBroadcast(LPCTSTR lpDevIDNO);
	long StopVoiceBroadcast();
	void AboutBox();
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_CMSV6OCX_H__4E0D0C35_78CB_4BA2_B58C_3888D4B49B67__INCLUDED_)
